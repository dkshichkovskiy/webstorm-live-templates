<templateSet group="NgRx Store">
  <template name="ngrx_reducer_root" value="import { createFeatureSelector, createSelector } from '@ngrx/store';&#10;&#10;import * as from$SubScope$ from './$from_sub_scope_file$';&#10;&#10;export interface $Scope$State {&#10;    $subScope$: from$SubScope$.State;&#10;}&#10;&#10;export const reducers = {&#10;    $subScope$: from$SubScope$.reducer,&#10;};&#10;&#10;const selectFeature = createFeatureSelector&lt;$Scope$State&gt;('$scopeName$');&#10;&#10;const select$SubScope$State = createSelector(selectFeature, (state: $Scope$State) =&gt; state.$subScope$);&#10;export const select$SubScope$Items = createSelector(select$SubScope$State, from$SubScope$.getItems);&#10;&#10;$END$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="SubScope" expression="" defaultValue="&quot;SubScope&quot;" alwaysStopAt="true" />
    <variable name="from_sub_scope_file" expression="decapitalize(SubScope)" defaultValue="" alwaysStopAt="true" />
    <variable name="Scope" expression="" defaultValue="&quot;Scope&quot;" alwaysStopAt="true" />
    <variable name="subScope" expression="camelCase(SubScope)" defaultValue="" alwaysStopAt="false" />
    <variable name="scopeName" expression="decapitalize(Scope)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_reducer_child" value="import { $Model$ } from '../$model_file$';&#10;import { Actions, ActionTypes } from '../actions/$actions_file$';&#10;&#10;export interface State {&#10;    items: $Model$[];&#10;    $END$&#10;}&#10;&#10;const initialState: State = {&#10;    items: [],&#10;};&#10;&#10;export function reducer(state: State = initialState, action: Actions) {&#10;    switch (action.type) {&#10;        case ActionTypes.$ACTION_TYPE$:&#10;            return { ...state, items: [] };&#10;&#10;        default:&#10;            return state;&#10;  }&#10;}&#10;&#10;export const getItems = (state: State) =&gt; state.items;&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="Model" expression="" defaultValue="&quot;Model&quot;" alwaysStopAt="true" />
    <variable name="model_file" expression="" defaultValue="&quot;models&quot;" alwaysStopAt="true" />
    <variable name="actions_file" expression="" defaultValue="&quot;models&quot;" alwaysStopAt="true" />
    <variable name="ACTION_TYPE" expression="" defaultValue="&quot;GET_MODELS&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_effect_class" value="import { Injectable } from '@angular/core';&#10;import { Actions } from '@ngrx/effects';&#10;&#10;import * as from$Entity$ from '../actions/$entity$';&#10;&#10;@Injectable()&#10;export class $Entity$Effects {&#10;    constructor(&#10;        private actions$: Actions,&#10;    ) {}&#10;  &#10;    $END$&#10;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="Entity" expression="capitalize(entity)" defaultValue="" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="&quot;entity&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_effect_i" value="@Effect()&#10;$effect$$: Observable&lt;Action&gt; = this.actions$&#10;    .pipe(&#10;        ofType($entity$Actions.ActionTypes.$ACTION_TYPE$),&#10;        switchMap((action: $entity$Actions.$ActionType$) =&gt; (&#10;            this.$entity$Service.$method$(action.payload)&#10;        )),&#10;        map((res: SettledResult&lt;$type$&gt;) =&gt; {&#10;            if (res.isSuccess) {&#10;                return new $entity$Actions.$ActionType$Success($res$);&#10;            } else {&#10;                return new $entity$tActions.$ActionType$Failure();&#10;            }&#10;        }),&#10;    );&#10;$END$" shortcut="SPACE" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="&quot;effect&quot;" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="&quot;entity&quot;" alwaysStopAt="true" />
    <variable name="ACTION_TYPE" expression="" defaultValue="&quot;ACTION_TYPE&quot;" alwaysStopAt="true" />
    <variable name="ActionType" expression="capitalize(underscoresToCamelCase(ACTION_TYPE))" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;any&quot;" alwaysStopAt="true" />
    <variable name="res" expression="" defaultValue="&quot;res.data&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_effect_i_store" value="@Effect()&#10;$effect$$: Observable&lt;Action&gt; = this.actions$&#10;    .pipe(&#10;        ofType($entity$Actions.ActionTypes.$ACTION_TYPE$),&#10;        withLatestFrom(this.store),&#10;        switchMap(([action, storeState]: [$entity$Actions.$ActionType$, any]) =&gt; (&#10;            this.$entity$Service.$method$(action.payload)&#10;        )),&#10;        map((res: SettledResult&lt;$type$&gt;) =&gt; {&#10;            if (res.isSuccess) {&#10;                return new $entity$Actions.$ActionType$Success($res$);&#10;            } else {&#10;                return new $entity$tActions.$ActionType$Failure();&#10;            }&#10;        }),&#10;    );&#10;$END$" shortcut="SPACE" toReformat="true" toShortenFQNames="true">
    <variable name="effect" expression="" defaultValue="&quot;effect&quot;" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="&quot;entity&quot;" alwaysStopAt="true" />
    <variable name="ACTION_TYPE" expression="" defaultValue="&quot;ACTION_TYPE&quot;" alwaysStopAt="true" />
    <variable name="ActionType" expression="capitalize(underscoresToCamelCase(ACTION_TYPE))" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;any&quot;" alwaysStopAt="true" />
    <variable name="res" expression="" defaultValue="&quot;res.data&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_actions" value="import { Action } from '@ngrx/store';&#10;&#10;export enum ActionTypes {&#10;    $ACTION_NAME$ = '[$Scope$] $ACTION_NAME$',&#10;    $END$&#10;}&#10;&#10;export class $ActionName$ implements Action {&#10;    readonly type = ActionTypes.$ACTION_NAME$;&#10;    &#10;    constructor(public payload: $type$) {}&#10;}&#10;&#10;export type Actions = &#10;    $ActionName$;&#10;" shortcut="SPACE" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION_NAME" expression="" defaultValue="&quot;ACTION_NAME&quot;" alwaysStopAt="true" />
    <variable name="Scope" expression="" defaultValue="&quot;Scope&quot;" alwaysStopAt="true" />
    <variable name="ActionName" expression="capitalize(underscoresToCamelCase(ACTION_NAME))" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;any&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx_action" value="export class $ActionName$ implements Action {&#10;    readonly type = ActionTypes.$ACTION_NAME$;&#10;    &#10;    constructor(public payload: $type$) {}$END$&#10;}&#10;" toReformat="true" toShortenFQNames="true">
    <variable name="ActionName" expression="" defaultValue="&quot;ActionName&quot;" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="capitalizeAndUnderscore(ActionName)" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;any&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>